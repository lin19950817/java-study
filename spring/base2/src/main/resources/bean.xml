<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/aop
       					   http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/context
       					   http://www.springframework.org/schema/context/spring-context.xsd">

    <!--扫描注解-->
    <context:component-scan base-package="org.lzn.annotation"/>

    <!--aop 注解生效-->
    <aop:aspectj-autoproxy/>

    <!--factory_bean-->
    <!--创建目标类-->
    <bean id="factoryBeanService" class="org.lzn.factory_bean.FactoryBeanServiceImpl"/>

    <!--创建一个切面类-->
    <bean id="factoryBeanAspect" class="org.lzn.factory_bean.FactoryBeanAspect"/>

    <!--
        创建代理类
        使用工厂 bean FactoryBean，底层调用 getObject() 返回特殊 bean
        ProxyFactoryBean 用于创建代理工厂 bean，生成特殊代理对象
            interface：确定接口，只有一个值时使用属性 value
                array：设置多个值
                    value：值
            target：确定目标类
            interceptorNames：通知切面类的名称，类型 String[]，只有一个值时使用属性 value
    -->
    <bean id="proxyService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="interfaces" value="org.lzn.factory_bean.FactoryBeanService"/>
        <property name="target" ref="factoryBeanService"/>
        <property name="interceptorNames" value="factoryBeanAspect"/>
        <!--
            强制使用 cglib
                如果目标类有借口，采用 jdk 动态代理
                如果没有接口，采用 cglib 字节码增强
                如果声明 optimize = true，无论是否有接口都采用 cglib
        -->
        <property name="optimize" value="true"/>
    </bean>

    <!--aop-->
    <!--创建目标类-->
    <bean id="aopService" class="org.lzn.aop.AopServiceImpl"/>
    <!--创建切面类-->
    <bean id="aopAspect" class="org.lzn.aop.AopAspect"/>
    <!--
        aop 编程
            导入命名空间
            使用 <aop:config> 进行配置
                proxy-target-class="true"：声明时使用 cglib 代理
                <aop:pointcut> 切入点，从目标对象获得具体方法
                <aop:advisor> 特殊的切面，只有一个通知和一个切入点
                    advice-ref：通知引用
                    pointcut-ref：切入点引用
            切入点表达式
                execution(* org.lzn.aop.*.*(..))
                选择方法(返回值 包 类名.方法名(参数))，* 代表任意
    -->
    <aop:config proxy-target-class="true">
        <aop:pointcut id="aopPointCut" expression="execution(* org.lzn.aop.*.*(..))"/>
        <aop:advisor advice-ref="aopAspect" pointcut-ref="aopPointCut"/>
    </aop:config>

    <!--基于 xml-->
    <!--创建目标类-->
    <bean id="xmlService" class="org.lzn.xml.XmlService"/>
    <!--创建切面类-->
    <bean id="xmlAspect" class="org.lzn.xml.XmlAspect"/>
    <!--
        aop 编程
            <aop:aspect>：将切面类声明“切面”，从而获得通知（方法）
                ref：切面类引用
                <aop:after>：最终
                <aop:after-returning>：后置
                    method：通知，方法名
                        方法可带参数 1：org.aspectj.lang.JoinPoint，用于描述连接点（目标方法）
                        方法可带参数 2：Object，目标方法返回值，使用 returning 属性配置
                    pointcut：切入点表达式，此表达式只能当前通知使用
                    pointcut-ref：切入点引用，可以与其他通知共享切入点
                <aop:after-throwing>：抛出异常
                    参数 1：连接点；描述对象
                    参数 2：获取异常信息，类型 java.lang.Throwable，使用 throwing 属性配置
                <aop:around>：环绕
                    方法格式：public Object xmlAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable
                        返回类型：Object
                        方法名：自定义
                        参数：org.aspectj.lang.ProceedingJoinPoint，方法 proceed 为执行目标方法
                        抛出异常：Throwable
                <aop:before>：前置
                    method：通知，方法名
                        方法可带参数 1：org.aspectj.lang.JoinPoint，用于描述连接点（目标方法）
                    pointcut：切入点表达式，此表达式只能当前通知使用
                    pointcut-ref：切入点引用，可以与其他通知共享切入点
                <aop:declare-parents>：引介
                <aop:pointcut>：切入点
                    expression：切入点表达式
                    id：名称，用于其他通知引用
    -->
    <aop:config>
        <aop:aspect ref="xmlAspect">
            <aop:pointcut id="xmlPointcut" expression="execution(* org.lzn.xml.XmlService.*(..))"/>

            <!--前置通知-->
            <!--<aop:before method="xmlBeforeWithParameter" pointcut-ref="xmlPointcut"/>-->

            <!--后置通知-->
            <!--<aop:after-returning method="xmlAfterWithParameter" pointcut-ref="xmlPointcut" returning="rtn"/>-->

            <!--环绕通知-->
            <!--<aop:around method="xmlAround" pointcut-ref="xmlPointcut"/>-->

            <!--抛出异常-->
            <!--<aop:after-throwing method="xmlAfterThrowing" pointcut-ref="xmlPointcut" throwing="throwable"/>-->

            <!--最终通知-->
            <aop:after method="xmlAfter" pointcut-ref="xmlPointcut"/>
        </aop:aspect>
    </aop:config>
</beans>